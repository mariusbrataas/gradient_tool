{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","r","g","b","a","col1","setCol1","col2","setCol2","img_url","setUrl","rot","setRot","background_str","Object","keys","map","key","slice","length","style","position","overflow","height","width","backgroundImage","backgroundPosition","class","type","placeholder","onChange","e","target","value","color","rgb","name","min","max","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wMA2DeA,MAtDf,WAAgB,IAAD,IAEWC,mBAAS,CAACC,EAAE,IAAKC,EAAE,GAAIC,EAAE,EAAGC,EAAE,MAFzC,mBAENC,EAFM,KAEAC,EAFA,OAGWN,mBAAS,CAACC,EAAE,EAAGC,EAAE,EAAGC,EAAE,IAAKC,EAAE,MAHxC,mBAGNG,EAHM,KAGAC,EAHA,OAIaR,mBAAS,2EAJtB,mBAINS,EAJM,KAIGC,EAJH,OAKSV,mBAAS,KALlB,mBAKNW,EALM,KAKDC,EALC,KAOTC,EAAiB,mBAAqBF,EAAM,QAQhD,OAPAE,GAAkB,QAClBC,OAAOC,KAAKV,GAAMW,IAAI,SAAAC,GAAG,OAAIJ,GAAkBR,EAAKY,GAAO,MAC3DJ,EAAiBA,EAAeK,MAAM,EAAGL,EAAeM,OAAS,GAAK,MACtEN,GAAkB,QAClBC,OAAOC,KAAKR,GAAMS,IAAI,SAAAC,GAAG,OAAIJ,GAAkBN,EAAKU,GAAO,MAC3DJ,EAAiBA,EAAeK,MAAM,EAAGL,EAAeM,OAAS,GAAK,OACtEN,GAAkB,QAAUJ,EAAU,KAEpC,yBAAKW,OAAK,GACRC,SAAS,QACTC,SAAS,SACTC,OAAO,QACPC,MAAM,QACNC,gBAAgBZ,EAChBa,mBAAmB,iBANX,sBAOF,QAPE,iCAQS,aART,+BASO,SATP,qCAUa,SAVb,IAYR,yBAAKC,MAAM,WAET,yBAAKA,MAAM,eACT,2BAAOA,MAAM,aAAaC,KAAK,OAAOC,YAAY,YAAYC,SAAU,SAAAC,GAAC,OAAIrB,EAAOqB,EAAEC,OAAOC,WAG/F,yBAAKN,MAAM,gBACP,kBAAC,eAAD,CACEO,MAAO7B,EACPyB,SAAW,SAAAC,GAAC,OAAIzB,EAAQyB,EAAEI,QAE5B,6BACA,kBAAC,eAAD,CACED,MAAO3B,EACPuB,SAAW,SAAAC,GAAC,OAAIvB,EAAQuB,EAAEI,QAE5B,6BAVJ,YAWc,KAXd,IAWoB,2BAAOP,KAAK,QAAQQ,KAAK,SAASC,IAAI,IAAIC,IAAI,MAAMR,SAAU,SAAAC,GAAC,OAAInB,EAAOmB,EAAEC,OAAOC,UACnG,6BAAMpB,MCvCE0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,gB","file":"static/js/main.06b4fc3b.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport './App.css';\n\nimport { SketchPicker } from 'react-color';\n\nfunction App() {\n\n  const [col1, setCol1] = useState({r:117, g:82, b:0, a:0.74})\n  const [col2, setCol2] = useState({r:6, g:0, b:141, a:0.93})\n  const [img_url, setUrl] = useState(\"https://cdn.pixabay.com/photo/2019/08/17/04/18/morning-4411420_1280.jpg\")\n  const [rot, setRot] = useState(145)\n\n  var background_str = 'linear-gradient(' + rot + 'deg, '\n  background_str += 'rgba('\n  Object.keys(col1).map(key => background_str += col1[key] + ',')\n  background_str = background_str.slice(0, background_str.length - 1) + '), '\n  background_str += 'rgba('\n  Object.keys(col2).map(key => background_str += col2[key] + ',')\n  background_str = background_str.slice(0, background_str.length - 1) + ')), '\n  background_str += 'url(\"' + img_url + '\")'\n  return (\n    <div style={{\n      position:'fixed',\n      overflow:'hidden',\n      height:'100vh',\n      width:'100vw',\n      backgroundImage:background_str,\n      backgroundPosition:'center center',\n      width:'100%',\n      backgroundRepeat:'no-repeat',\n      backgroundSize:'cover',\n      backgroundAttachment:'fixed'\n    }}>\n      <div class=\"wrapper\">\n\n        <div class=\"header area\">\n          <input class=\"inputfield\" type=\"text\" placeholder=\"Image url\" onChange={e => setUrl(e.target.value)}/>\n        </div>\n\n        <div class=\"sidebar area\">\n            <SketchPicker\n              color={col1}\n              onChange={ e => setCol1(e.rgb) }\n              />\n            <br/>\n            <SketchPicker\n              color={col2}\n              onChange={ e => setCol2(e.rgb) }\n            />\n            <br/>\n            Rotation {\"  \"} <input type=\"range\" name=\"points\" min=\"0\" max=\"360\" onChange={e => setRot(e.target.value)}></input>\n            <br/>{background_str}\n        </div>\n\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}